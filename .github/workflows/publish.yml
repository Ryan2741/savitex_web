name: Build and Deploy to Web Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r dist/* deploy/
          cp package.json deploy/
          cp package-lock.json deploy/
          cp server.js deploy/
          cp -r api deploy/
          echo "node_modules/" > deploy/.gitignore

      - name: Deploy to Web Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Create application directory if it doesn't exist
            mkdir -p /var/www/savitex
            
            # Stop the application if running
            pm2 stop savitex || true
            
            # Backup current deployment
            if [ -d "/var/www/savitex/current" ]; then
              mv /var/www/savitex/current /var/www/savitex/backup-$(date +%Y%m%d-%H%M%S)
            fi
            
            # Create new deployment directory
            mkdir -p /var/www/savitex/current

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "deploy/*"
          target: "/var/www/savitex/current/"
          strip_components: 1

      - name: Install dependencies and start application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /var/www/savitex/current
            
            # Install production dependencies
            npm ci --only=production
            
            # Create environment file
            cat > .env << EOF
            NODE_ENV=production
            PORT=3001
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            SMTP_SECURE=${{ secrets.SMTP_SECURE }}
            EOF
            
            # Set proper permissions
            chown -R www-data:www-data /var/www/savitex/current
            chmod -R 755 /var/www/savitex/current
            
            # Start the application with PM2
            pm2 start server.js --name "savitex" --env production || pm2 restart savitex
            pm2 save
            
            # Clean up old backups (keep last 3)
            cd /var/www/savitex
            ls -t backup-* 2>/dev/null | tail -n +4 | xargs rm -rf || true
            
            echo "Deployment completed successfully!"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Wait for application to start
            sleep 10
            
            # Check if application is running
            if pm2 list | grep -q "savitex.*online"; then
              echo "‚úÖ Application is running successfully"
              
              # Test the application endpoint
              if curl -f http://localhost:3001 > /dev/null 2>&1; then
                echo "‚úÖ Application is responding to requests"
              else
                echo "‚ùå Application is not responding"
                pm2 logs savitex --lines 20
                exit 1
              fi
            else
              echo "‚ùå Application failed to start"
              pm2 logs savitex --lines 20
              exit 1
            fi

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "üöÄ Deployment successful!"
            echo "Website: http://${{ secrets.SERVER_HOST }}"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
